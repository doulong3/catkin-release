set(CMAKE_PREFIX_PATH @CMAKE_INSTALL_PREFIX@:${CMAKE_PREFIX_PATH})

set(ROS_FOUND TRUE)

#don't overwrite ROS_* if we're recursive
if(NOT _ROS_FIND_ OR _ROS_FIND_ EQUAL 0)
  set(ROS_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/include")
  set(ROS_LIBRARIES "")
  set(_ROS_FIND_ 0)
endif()

#recursive counter increment
MATH( EXPR _ROS_FIND_ "${_ROS_FIND_} + 1" )

macro(list_push listname)
  foreach(item ${ARGN})
    list(FIND ${listname} ${item} _index)
    if(_index EQUAL -1)
      list(APPEND ${listname} ${item})
    endif()
  endforeach()
endmacro()

foreach(component ${ROS_FIND_COMPONENTS})

  string(TOLOWER "${component}" comp)
  if (${comp} STREQUAL ros)
    message(FATAL_ERROR "*\n*\n*  ROS isn't a package.  Don't find_package() it.\n*\n*")
  endif()

  if(ROS_FIND_REQUIRED)
    find_package(${comp} REQUIRED NO_MODULE
      PATHS
      @CMAKE_INSTALL_PREFIX@/share/${component}/cmake
      )
  elseif(ROS_FIND_QUIETLY)
    find_package(${comp} QUIET NO_MODULE
      PATHS
      @CMAKE_INSTALL_PREFIX@/share/${component}/cmake
      )
  else()
    find_package(${comp} NO_MODULE
      PATHS
      @CMAKE_INSTALL_PREFIX@/share/${component}/cmake
      )
  endif()

  list_push(ROS_INCLUDE_DIRS ${${comp}_INCLUDE_DIRS})
  list_push(ROS_LIBRARIES ${${comp}_LIBRARIES})

endforeach()

#recursive counter decrement
MATH( EXPR _ROS_FIND_ "${_ROS_FIND_} - 1" )
