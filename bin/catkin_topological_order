#!/usr/bin/env python

from __future__ import print_function
import argparse
import os
import sys

try:
    from catkin_pkg.topological_order import topological_order
except ImportError as e:
    e.args = ['%s\nCould not find Python module "catkin_pkg". Have you installed the Debian package "python-catkin-pkg"?' % (e.message)]
    raise

parser = argparse.ArgumentParser(description='Outputs the catkin projects of a workspace in topological order.')
parser.add_argument('workspace', nargs='?', default='.', help='The path to a workspace (default: .)')
parser.add_argument('--only-folders', action='store_true', help='Only output the project folders')
parser.add_argument('--only-names', action='store_true', help='Only output the project names')
args = parser.parse_args()

# verify that workspace folder exists
workspace = os.path.abspath(args.workspace)
if not os.path.isdir(workspace):
    print('Workspace "%s" does not exist' % workspace, file=sys.stderr)
    exit(1)

# verify reasonable argument combination
if args.only_folders and args.only_names:
    print('Use either "--only-folders" or "--only-names" but not both', file=sys.stderr)
    exit(2)

ordered_projects = topological_order(workspace)
if not ordered_projects:
    print('Workspace "%s" seems to not contain any projects.  Have you passed the correct path to a catkin workspace?' % workspace, file=sys.stderr)
    exit(3)

for (path, package) in ordered_projects:
    if args.only_folders:
        print('%s' % path)
    elif args.only_names:
        print('%s' % package.name)
    else:
        print('%s %s' % (package.name, path))
